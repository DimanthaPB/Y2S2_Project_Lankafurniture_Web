const fs = require("fs");
const path = require("path");
const PDFDocument = require("pdfkit");
const Item = require("../models/item");
const sendEmail = require("../utils/sendEmail"); 


//Add Item
exports.addItem = async (req, res) => {
  try {
    const item = new Item(req.body);
    await item.save();

    // Check low stock
    if (item.quantity < item.reorderLevel) {
      await sendEmail(
        "pixelbluegfx@gmail.com",
        "Low Stock Alert",
        `The item "${item.name}" is low in stock.\nQuantity left: ${item.quantity}`
      );
    }

    res.status(201).json(item);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};


//Get All Items
exports.getItems = async (req, res) => {
try {
 const items = await Item.find();
 res.json(items);
} catch (err) {
 res.status(500).json({ error: err.message });
}
};


//Update Item
exports.updateItem = async (req, res) => {
  try {
    const item = await Item.findByIdAndUpdate(req.params.id, req.body, { new: true });

    // Check low stock after update
    if (item.quantity < item.reorderLevel) {
      await sendEmail(
        "pixelbluegfx@gmail.com",
        "Low Stock Alert",
        `The item "${item.name}" is low in stock after an update.\nQuantity left: ${item.quantity}`
      );
    }

    res.json(item);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

//Delete Item
exports.deleteItem = async (req, res) => {
try {
 await Item.findByIdAndDelete(req.params.id);
 res.json({ message: "Item deleted" });
} catch (err) {
 res.status(500).json({ error: err.message });
}
};

//Get Low Stock Items
exports.getLowStock = async (req, res) => {
try {
 const items = await Item.find({ $expr: { $lt: ["$quantity", "$reorderLevel"] } });
 res.json(items);
} catch (err) {
 res.status(500).json({ error: err.message });
}
};

//Generate Report (Summary JSON)
exports.generateReportSummary = async (req, res) => {
try {
 const totalItems = await Item.countDocuments();
 const totalValue = await Item.aggregate([
   { $group: { _id: null, total: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }
 ]);

 res.json({
   totalItems,
   totalValue: totalValue[0]?.total || 0,
 });
} catch (err) {
 res.status(500).json({ error: err.message });
}
};

// Helper: draw a table row
function tableRow(doc, y, c1, c2, c3, c4, header = false) {
doc
 .font(header ? "Helvetica-Bold" : "Helvetica")
 .fontSize(12)
 .fillColor(header ? "#333" : "#555")
 .text(c1, 50, y, { width: 150 })
 .text(c2, 200, y, { width: 100, align: "right" })
 .text(c3, 320, y, { width: 100, align: "right" })
 .text(c4, 440, y, { width: 100, align: "right" });
}

//Generate Report PDF
exports.generateReportPDF = async (req, res) => {
try {
 const items = await Item.find();
 const totalItems = items.length;
 const totalValue = items.reduce((sum, i) => sum + i.unitPrice * i.quantity, 0);
 const profit = totalValue * 0.2;
 const lowStockCount = items.filter((i) => i.quantity < i.reorderLevel).length;

 const doc = new PDFDocument({ margin: 50 });
 const filename = "inventory-report.pdf";

 res.setHeader("Content-disposition", `inline; filename="${filename}"`);
 res.setHeader("Content-type", "application/pdf");
 doc.pipe(res);

 // ====== Company Logo ======
 const logoPath = path.join(__dirname, "..", "frontend", "public", "logo.jpg");
 if (fs.existsSync(logoPath)) {
   doc.image(logoPath, 50, 40, { width: 80 });
 }

 // ====== Title ======
 doc.fontSize(22).fillColor("#333").text("Inventory Report", 150, 50);
 doc.moveDown(2);

 // ====== Overview ======
 doc.fontSize(14).fillColor("#555").text(`Total Items: ${totalItems}`);
 doc.text(`Total Value: Rs. ${totalValue.toLocaleString()}`);
 doc.text(`Estimated Profit: Rs. ${profit.toLocaleString()}`);
 doc.text(`Low Stock Items: ${lowStockCount}`);
 doc.moveDown(2);

 // ====== Table Header ======
 let tableTop = 250;
 tableRow(doc, tableTop, "Item Name", "Unit Price", "Quantity", "Value", true);

 // ====== Table Content ======
 items.forEach((item, i) => {
   const y = tableTop + 25 + i * 20;
   tableRow(
     doc,
     y,
     item.name,
     `Rs. ${item.unitPrice}`,
     item.quantity,
     `Rs. ${item.unitPrice * item.quantity}`
   );
 });

 // ====== Footer ======
 doc.moveDown(4);
 doc
   .fontSize(12)
   .fillColor("#777")
   .text("Generated by Inventory Management System", { align: "center" });

 doc.end();
} catch (err) {
 res.status(500).json({ message: "Error generating PDF", error: err.message });
}
};

// ➤ Get Sales Data (by category)
exports.getSalesData = async (req, res) => {
try {
 const sales = await Item.aggregate([
   {
     $group: {
       _id: "$category",
       totalSales: { $sum: { $multiply: ["$unitPrice", "$quantity"] } }
     }
   }
 ]);
 res.json(sales);
} catch (err) {
 res.status(500).json({ error: err.message });
}
};

// Background Low Stock Check
exports.checkLowStock = async () => {
const lowStockItems = await Item.find({ $expr: { $lt: ["$quantity", "$reorderLevel"] } });

if (lowStockItems.length > 0) {
 for (let item of lowStockItems) {
   await sendEmail(
     "pixelbluegfx@outlook.com", // change to your admin email
     "⚠ Low Stock Alert",
     `The item "${item.name}" is low in stock.\n\nQuantity left: ${item.quantity}`
   );
 }
}

return lowStockItems;
};